@page "/login"
@using AdminPanel.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject ApiAuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudCard Elevation="25" Class="pa-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Class="text-center">Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label="Username" @bind-Value="loginModel.Username" Required="true" RequiredError="Username is required!" />
                <MudTextField T="string" Label="Password" @bind-Value="loginModel.Password" Required="true" RequiredError="Password is required!" InputType="InputType.Password" />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
                }
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="HandleLogin" FullWidth="true" Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Login</MudText>
                    }
                </MudButton>
                <MudText Class="mt-4 text-center">
                    Don't have an account? <MudLink Href="/register">Register</MudLink>
                </MudText>
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private MudForm form;
    private bool success;
    private bool isLoading;
    private string errorMessage;
    private LoginModel loginModel = new LoginModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleLogin()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                isLoading = true;
                errorMessage = null;

                // Prepare form data for token request
                var formData = new List<KeyValuePair<string, string>>
                {
                    new KeyValuePair<string, string>("grant_type", "password"),
                    new KeyValuePair<string, string>("client_id", "UI"),
                    new KeyValuePair<string, string>("username", loginModel.Username),
                    new KeyValuePair<string, string>("password", loginModel.Password)
                };

                var content = new FormUrlEncodedContent(formData);

                // Send POST request to Identity server
                var response = await Http.PostAsync("https://identity.stacksandbox.com/connect/token", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.access_token))
                    {
                        await AuthStateProvider.MarkUserAsAuthenticated(result.access_token);
                        Snackbar.Add("Login successful", Severity.Success);
                        NavigationManager.NavigateTo("/dashboard");
                    }
                    else
                    {
                        errorMessage = "Error receiving token.";
                    }
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = "Invalid credentials or server error.";
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred during login.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class TokenResponse
    {
        public string access_token { get; set; }
        public int expires_in { get; set; }
        public string token_type { get; set; }
        public string refresh_token { get; set; }
        public int user_id { get; set; }
        public string subscription_oid { get; set; }
        public string secret_owner { get; set; }
    }
}
