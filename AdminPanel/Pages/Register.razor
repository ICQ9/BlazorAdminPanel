@page "/register"
@using AdminPanel.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ApiAuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudCard Elevation="25" Class="pa-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Class="text-center">Register</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="success">
                <MudTextField T="string" Label="Email" @bind-Value="registerModel.Email" Required="true" RequiredError="Email is required!" Validation="@(ValidateEmail)" />
                <MudTextField T="string" Label="Password" @bind-Value="registerModel.Password" Required="true" RequiredError="Password is required!" InputType="InputType.Password" />
                <MudTextField T="string" Label="Confirm Password" @bind-Value="registerModel.ConfirmPassword" Required="true" RequiredError="Password confirmation is required!" InputType="InputType.Password" Validation="ValidateConfirmPassword" />
                <MudTextField T="string" Label="VendorId" @bind-Value="registerModel.VendorId" Required="true" RequiredError="VendorId is required!" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="HandleRegister" FullWidth="true" Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudText>Register</MudText>
                    }
                </MudButton>

                <MudText Class="mt-4 text-center">
                    Already have an account? <MudLink Href="/login">Login</MudLink>
                </MudText>
            </MudForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private MudForm form;
    private bool success;
    private bool isLoading;
    private string errorMessage;
    private RegisterModel registerModel = new RegisterModel();

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required!";
        var attr = new EmailAddressAttribute();
        return attr.IsValid(email) ? null : "Invalid email address!";
    }

    private async Task HandleRegister()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                isLoading = true;
                errorMessage = null;

                var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Registration successful. Please log in.", Severity.Success);
                    NavigationManager.NavigateTo("/login");
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    errorMessage = !string.IsNullOrEmpty(error) ? error : "Registration failed.";
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred during registration.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        return confirmPassword == registerModel.Password ? null : "Passwords do not match";
    }

    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }

        [Required]
        public string VendorId { get; set; }
    }
}
