@page "/profiles/create"
@using AdminPanel.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using AdminPanel.Shared.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager Navigation

<div class="create-profile-container">
    <div class="create-profile-card">
        <div class="card-header">
            <h3>Create New Profile</h3>
            <p class="subtitle">Fill in the profile details below</p>
        </div>

        <div class="card-body">
            <EditForm Model="@newProfile" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-section">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="name">Profile Name</label>
                            <InputText id="name" @bind-Value="newProfile.Name" class="form-control" placeholder="Enter profile name" />
                            <ValidationMessage For="@(() => newProfile.Name)" />
                        </div>

                        <div class="form-group">
                            <label for="campaignId">Campaign</label>
                            <InputSelect id="campaignId" class="form-control" @bind-Value="newProfile.CampaignId">
                                <option value=0>Select Campaign</option>
                                @foreach (var campaign in campaigns)
                                {
                                    <option value="@campaign.Id">@campaign.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => newProfile.CampaignId)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="dateFrom">Date From</label>
                            <InputDate id="dateFrom" @bind-Value="newProfile.DateFrom" class="form-control" format="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => newProfile.DateFrom)" />
                            @if (!newProfile.IsDateRangeValid())
                            {
                                <div class="validation-message">@newProfile.GetDateRangeErrorMessage()</div>
                            }
                        </div>

                        <div class="form-group">
                            <label for="dateTo">Date To</label>
                            <InputDate id="dateTo" @bind-Value="newProfile.DateTo" class="form-control" format="dd/MM/yyyy" />
                            <ValidationMessage For="@(() => newProfile.DateTo)" />
                        </div>
                    </div>

                    <MudStack>
                        <MudText>Budget Limit Type</MudText>
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="newProfile.BudgetRestrictionType" Color="Color.Inherit" CheckMark>
                            <MudToggleItem Value="@("Unlim")" Text="Umlim" Disabled="@disableUnlimBudget" />
                            <MudToggleItem Value="@("Profile")" Text="Profile" />
                            <MudToggleItem Value="@("Daily")" Text="Daily" />
                        </MudToggleGroup>
                        @if (newProfile.BudgetRestrictionType == "Unlim")
                        {
                            disableUnlimImp = true;
                        }
                        else
                        {
                            disableUnlimImp = false;
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="newProfile.BudgetLimit" Label="Limit" Variant="Variant.Text" HelperText="Please enter value >0.01 and <1 billion"></MudTextField>
                            </MudItem>
                        }
                    </MudStack>

                    @* <MudStack>
                        <MudText>Impressions Limit Type</MudText>
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="newProfile.ImpressionsRestrictionType" Color="Color.Inherit" CheckMark>
                            <MudToggleItem Value="@("Unlim")" Text="Umlim" Disabled="@disableUnlimImp" />
                            <MudToggleItem Value="@("Profile")" Text="Profile" />
                            <MudToggleItem Value="@("Daily")" Text="Daily" />
                        </MudToggleGroup>
                        @if (newProfile.ImpressionsRestrictionType == "Unlim")
                        {
                            disableUnlimBudget = true;
                        }
                        else
                        {
                            disableUnlimBudget = false;
                            <MudItem xs="12" sm="6" md="4">
                                <MudTextField @bind-Value="newProfile.BudgetLimit" Label="Limit" Variant="Variant.Text" HelperText="Please enter value >0.01 and <1 billion"></MudTextField>
                            </MudItem>
                        }
                    </MudStack> *@

                    <MudStack>
                        <MudText>Impression Distribution</MudText>
                        <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="newProfile.DeliveryDistribution" Color="Color.Inherit" CheckMark>
                            <MudToggleItem Value="@("ASAP")" Text="ASAP" />
                            <MudToggleItem Value="@("EvenlyPerDay")" Text="Evenly" />
                        </MudToggleGroup>
                    </MudStack>

                    <MudStack>
                        <MudText>Auction Type</MudText>
                        <MudSelect @bind-Value="newProfile.AuctionType" Variant="Variant.Text" Label="Auction Type">
                            <MudSelectItem Value="@("FirstPriceAuction")">First Price Auction</MudSelectItem>
                            <MudSelectItem Value="@("SecondPriceAuction")">Second Price Auction</MudSelectItem>
                        </MudSelect>
                    </MudStack>

                    <MudPaper Class="pa-4 my-4" Elevation="0" Outlined="true">
                        <MudGrid>
                            <MudItem xs="6">
                                <div class="d-flex align-center">
                                    <MudRadio Color="Color.Success" @bind-Checked="profileSelected" Value="true" />
                                    <MudText Class="ml-1">Event Price</MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="ml-1" />
                                </div>
                                <MudTextField T="decimal"
                                              Value="@newProfile.EventPrice"
                                              ValueChanged="@((decimal val) => newProfile.EventPrice = val)"
                                              Margin="Margin.Dense"
                                              Class="mt-1 ml-6" />
                            </MudItem>
                            <MudItem xs="6" Class="d-flex align-center justify-end">
                                <div>
                                    <MudText Class="mb-1 text-center">Recoomended Price</MudText>
                                    <MudText Color="Color.Warning" Class="text-center">@newProfile.EventPrice USD</MudText>
                                </div>
                                <MudText Typo="Typo.h5" Class="mx-4">≥</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    @if (newProfile.CampaignId != 0)
                    {
                        <button type="submit" class="btn btn-primary" @onclick="OnCampaignSelected">Load Product Format</button>
                        @if (productFormats.Count != 0)
                        {
                            <div class="form-group">
                                <label>Available Product Formats</label>
                                <div class="product-formats-list">
                                    @foreach (var format in productFormats)
                                    {
                                        <div class="product-format-item">
                                            <span>@format.FormatName</span>
                                            <button type="button" class="btn btn-link" @onclick="() => OpenLinkFormatModal(format)">
                                                Link Format
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>



                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">
                        <span class="btn-icon">✓</span>
                        Create Profile
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">
                        <span class="btn-icon">×</span>
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showLinkFormatModal)
{
    <div class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Link Product Format</h4>
                <button class="close" @onclick="CloseLinkFormatModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Selected Format: @selectedFormat?.FormatName</label>
                    <div class="format-details">
                        <p>Price Model: @selectedFormat?.PriceModel</p>
                        <p>Currency: @selectedFormat?.Currency</p>
                        <p>Product Type: @selectedFormat?.ProductType</p>
                    </div>
                </div>
                <div class="form-actions">
                    <button class="btn btn-primary" @onclick="LinkFormat">
                        <span class="btn-icon">✓</span>
                        Link Format
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseLinkFormatModal">
                        <span class="btn-icon">×</span>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool inventorySelected = false;
    private bool profileSelected = true;
    private string inventoryBidValue = "0.0000";
    private string profileBidValue = "0,0000";
    public bool disableUnlimBudget = true;
    public bool disableUnlimImp = false;
    public int selectedCampaignId { get; set; }
    private SaveProfileModel newProfile = new();
    private List<Campaign> campaigns = new();
    private List<ProductFormat> productFormats = new();
    private bool showLinkFormatModal = false;
    private ProductFormat selectedFormat;
    [Parameter]
    public EventCallback<int?> OnChange { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaigns();
        newProfile.DateFrom = DateTime.Today;
        newProfile.DateTo = DateTime.Today.AddMonths(1);
        newProfile.State = "ReadyReady";
        newProfile.BudgetRestrictionType = "Profile";
        newProfile.ImpressionsRestrictionType = "Unlim";
        newProfile.AuctionType = "SecondPriceAuction";
    }

    private async Task LoadCampaigns()
    {
        var token = await LocalStorageService.GetItemAsync("access_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            campaigns = await Http.GetFromJsonAsync<List<Campaign>>("/api/campaign/list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading campaigns: {ex.Message}");
        }
    }

    private async Task OnCampaignSelected()
    {
        await LoadProductFormats(newProfile.CampaignId);
    }

    private async Task LoadProductFormats(int campaignId)
    {
        var token = await LocalStorageService.GetItemAsync("access_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            var response = await Http.GetFromJsonAsync<List<ProductFormatResponse>>($"/api/campaign/{campaignId}/available-product-formats");
            if (response != null && response.Any())
            {
                productFormats = response.FirstOrDefault()?.FormatList ?? new List<ProductFormat>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product formats: {ex.Message}");
        }
    }

    private void OpenLinkFormatModal(ProductFormat format)
    {
        selectedFormat = format;
        showLinkFormatModal = true;
    }

    private void CloseLinkFormatModal()
    {
        showLinkFormatModal = false;
        selectedFormat = null;
    }

    private async Task LinkFormat()
    {
        if (selectedFormat == null)
            return;

        newProfile.ProductFormatId = selectedFormat.Id;

        CloseLinkFormatModal();
    }

    private async Task HandleValidSubmit()
    {
        var token = await LocalStorageService.GetItemAsync("access_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        try
        {
            var response = await Http.PostAsJsonAsync("/api/profile", newProfile);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/profiles");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating profile: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating profile: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/profiles");
    }
} 