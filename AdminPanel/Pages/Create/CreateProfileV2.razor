@page "/profiles/createV2"
@using System.ComponentModel.DataAnnotations
@using System.IO
@using AdminPanel.Services
@using AdminPanel.Shared.Models
@using AdminPanel.Pages.Components
@using System.Net.Http.Headers
@using System.Text.Json
@using FluentValidation
@inject ISnackbar Snackbar
@inject ILoadEntityService LoadEntityService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IDialogService DialogService


<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex align-center justify-space-between pa-4 pb-2">
    @if (_loadingData)
    {
        <div class="blur-overlay">
            <MudProgressCircular Color="Color.Primary" Style="width: 170px; height: 170px" Indeterminate="true" />
        </div>
    }

    <MudStepper @bind-ActiveIndex="_index" OnPreviewInteraction="OnPreviewInteraction">
            <MudStep Title="Fill Basic Profile Information">
                <ProfileBaseForm @bind-Model="newProfile" OnFormRefReady="@(form => FormRef = form)" />
            </MudStep>
            <MudStep Title="Link Product to profile">
                <MudForm Model="@newProfile" @ref="@FormRef">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <MudTable @ref="_table" Items="productFormats">
                                <HeaderContent>
                                    <MudTh>Select</MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Price Model</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudRadioGroup @bind-Value="newProfile.ProductFormatId">
                                        <MudRadio Value="@context.Id" Size="Size.Small"></MudRadio>
                                    </MudRadioGroup>
                                    <MudTd DataLabel="Name">@context.FormatName</MudTd>
                                    <MudTd DataLabel="Position">@context.PriceModel</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudStep>
            <MudStep Title="Create an ad" Disabled="_disabled">
                @if (newProfile.IsTeaserProfile)
                {
                    <MudForm Model="@newProfile" @ref="@FormRef">
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="12">
                                <MudTable @ref="_tableFeed" Items="productFeedItems" MultiSelection="true" Filter="new Func<ProductFeedItem,bool>(FilterFunc1)" @bind-SelectedItems="selectedFeedItems">
                                    <ToolBarContent>
                                        <MudText Typo="Typo.h6">Select Products</MudText>
                                        <MudSpacer />
                                        <MudTextField Immediate="true" @bind-Value="searchString1"
                                        Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh>Preview</MudTh>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Brand</MudTh>
                                        <MudTh>Description</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Preview"><MudImage Width="50" Height="50" Src="@context.Preview"></MudImage></MudTd>
                                        <MudTd DataLabel="Name">@context.Title</MudTd>
                                        <MudTd DataLabel="Brand">@context.Brand</MudTd>
                                        <MudTd DataLabel="Description">@context.Description</MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new []{3,5,10}" />
                                    </PagerContent>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                }
                else
                {
                    <MudForm Model="@newCreative" @ref="@FormRef">
                        <MudTextField Required="true" Label="Name" @bind-Value="@newCreative.Name" />
                        <MudTextField Required="true" Label="Landing page" @bind-Value="@newCreative.TrackingUrl" />

                        @if (productFeedItems?.Any() == true)
                        {
                            <MudSelect T="string" Label="Brand Name" @bind-Value="@newCreative.BrandName" Required="true">
                                @foreach (var brand in productFeedItems.Select(x => x.Brand).Distinct())
                                {
                                    <MudSelectItem Value="@brand">@brand</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            <MudTextField Required="true" Label="Brand Name" @bind-Value="@newCreative.BrandName" />
                        }

                        <DragAndDropComponent OnFormDataGenerated="OnFormDataGenerated" />
                    </MudForm>
                }
            </MudStep>
            <MudStep Title="Setup Targeting" Disabled="_disabled">
                <MudPaper Class="pa-4 my-4" Elevation="0" Outlined="true">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">Targetings</MudText>
                    <MudList T="TargetingType" Dense="true">
                        @foreach (var targetingType in Enum.GetValues<TargetingType>())
                        {
                            <MudListItem OnClick="@(() => NavigateToTargeting(targetingType))"
                            Text="@GetTargetingText(targetingType)"
                            Icon="@GetTargetingIcon(targetingType)">
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudStep>
            <MudStep Title="Setup Price" Disabled="_disabled">
                <EventPriceForm @bind-Model="newProfile" OnFormRefReady="@(form => FormRef = form)" />
            </MudStep>
        </MudStepper>
</MudContainer>

@code {
    private bool _loadingData = true;
    private bool _error;
    private bool _completed;
    private bool basicInformationComplete;
    private bool _disabled;
    private string token;
    private string imagePreview;

    MudForm FormRef;
    MudTable<ProductFormat> _table;
    MudTable<ProductFeedItem> _tableFeed;

    private List<ProductFormat> productFormats = new List<ProductFormat>();
    private IEnumerable<ProductFeed> productFeeds;
    private string searchString1 = "";
    private List<ProductFeedItem> productFeedItems = new List<ProductFeedItem>();

    private FileFormData uploadFileFormData;
    private SaveProfileModel newProfile = new SaveProfileModel();
    private SaveCreativeModel newCreative = new SaveCreativeModel();
    private ProductFormat selectedItem = new ProductFormat();
    private Campaign selectedCampaign = new Campaign();
    private Advertiser selectedAdvertiser = new Advertiser();
    private HashSet<ProductFeedItem> selectedFeedItems = new HashSet<ProductFeedItem>();
    private FeedAdItem feedAdItem = new FeedAdItem();
    private GeoLocalTargeting geoTargeting = new GeoLocalTargeting();
    private int creativeId;
    private int createdProfileId;

    private int _index;

    private List<CpmData> cpmDataList = new List<CpmData>
    {
        new CpmData { Percent = 5.0, Cpm = 0.7435 },
        new CpmData { Percent = 10.0, Cpm = 1.0674 },
        new CpmData { Percent = 15.0, Cpm = 1.1713 },
        new CpmData { Percent = 20.0, Cpm = 1.4205 },
        new CpmData { Percent = 25.0, Cpm = 1.5326 },
    };

    private async Task OpenGeoTargeting()
    {
        var parameters = new DialogParameters
        {
            { "GeoTargeting", geoTargeting }
        };
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false,
                BackgroundClass = "backdrop-blur",
            //Class = "geo-targeting-modal"
            };

        var dialog = await DialogService.ShowAsync<Components.Targetings.GeoTargeting>("",parameters, options);
        var result = await dialog.Result;

        if (result.Data != null)
        {
            geoTargeting = result.Data as GeoLocalTargeting ?? new GeoLocalTargeting();
        }
    }

    private async void NavigateToTargeting(TargetingType type)
    {
        switch (type)
        {
            case TargetingType.Geo:
                await OpenGeoTargeting();
                break;
            default:
                break;
        }
        StateHasChanged();
        //NavigationManager.NavigateTo($"/create-profile/targeting/{type.ToString().ToLower()}");
    }

    private string GetTargetingText(TargetingType targetingType)
    {
        switch (targetingType)
        {
            case TargetingType.Geo:
                var count = geoTargeting?.IncludedLocations?.Count ?? 0;
                return count > 0
                    ? $"Geo ({count} location{(count != 1 ? "s" : "")})"
                    : "Geo";

            case TargetingType.Device:
                // Add similar logic for other targeting types if needed
                return "Device";

            default:
                return targetingType.ToString();
        }

    }

    private string GetTargetingIcon(TargetingType type)
    {
        return type switch
        {
            TargetingType.Geo => Icons.Material.Filled.Public,
            TargetingType.Demographic => Icons.Material.Filled.People,
            TargetingType.Interest => Icons.Material.Filled.Favorite,
            TargetingType.Device => Icons.Material.Filled.Devices,
            TargetingType.Custom => Icons.Material.Filled.Tune,
            _ => Icons.Material.Filled.Settings
        };
    }

    private bool FilterFunc1(ProductFeedItem feedItem) => FilterFunc(feedItem, searchString1);

    private bool FilterFunc(ProductFeedItem feedItem, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (feedItem.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (FormRef != null)
        {
            await FormRef.Validate();

            if (!FormRef.IsValid)
            {
                arg.Cancel = true;
                return;
            }
        }
        _loadingData = true;
        StateHasChanged();

        if (arg.Action == StepAction.Complete)
        {
            await ControlStepCompletion(arg);
        }
        _loadingData = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await GetToken();
        if (!string.IsNullOrWhiteSpace(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        _loadingData = false;
    }

    private async Task<int> GetCampaignId()
    {
        try
        {
            var campaings = await LoadEntityService.LoadCampaigns();
            selectedCampaign = campaings.FirstOrDefault();
            return selectedCampaign.Id;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading campaigns: {ex.Message}");
            return 0;
        }
    }

    private async Task LoadProductFormats(int campaignId)
    {
        try
        {
            productFormats = (await LoadEntityService.LoadProductFormat(campaignId)).FirstOrDefault().FormatList ?? new List<ProductFormat>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product formats: {ex.Message}");
        }
    }

    private async Task LoadAdvertiserById(int advId)
    {
        selectedAdvertiser = (await LoadEntityService.LoadAdvertiserById(advId));
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                var campaignId = await GetCampaignId();
                if (campaignId != 0)
                {
                    newProfile.CampaignId = campaignId;
                    await LoadProductFormats(campaignId);
                    await LoadAdvertiserById(selectedCampaign.AdvertiserId);
                }
                break;
            case 1:
                await SetupProductFormatToProfile(newProfile.ProductFormatId);
                await LoadProductFeeds();
                await LoadProductFeedsItems();
                break;
            case 2:
                await SetupCreativeStep(arg);
                await LoadRecomendedPrice();
                break;
            case 3:
                // Handle targeting step
                break;
            case 4:
                // Save profile and redirect to success page
                await SaveProfile();
                NavigationManager.NavigateTo("/profiles");
                Snackbar.Add("Profile created successfully", MudBlazor.Severity.Success);
                break;
            case 5:
                break;
        }
    }

    private async Task SetupCreativeStep(StepperInteractionEventArgs arg)
    {
        var (result, error) = await SetupCreative();
        if (!result)
        {
            Snackbar.Add(error, MudBlazor.Severity.Error);
            arg.Cancel = true;
        }
    }

    private async Task<(bool, string)> SetupCreative()
    {
        if (newProfile.IsTeaserProfile)
        {
            if (selectedFeedItems.Count > 0)
            {
                var teaserId = selectedFeedItems.Select(x => x.TeaserFeedId).FirstOrDefault();
                feedAdItem.FeedIds.Add(teaserId);
                feedAdItem.ItemCount = selectedFeedItems.Count();
                feedAdItem.Name = "TeaserFeed";
                feedAdItem.ProfileId = createdProfileId;
                feedAdItem.StaticRules = new StaticRules()
                {
                    ItemId = selectedFeedItems.Select(x => x.ItemId).ToList(),
                };
            }
            return (true, "");
        }
        else
        {
            newCreative.AdvertiserId = selectedAdvertiser.Id;
            newCreative.AdvertiserUrl = $"htps://{selectedAdvertiser.AdvertiserUrl}";
            newCreative.State = "Active";
            newCreative.TemplateId = 1;
            newCreative.LandingPageType = "Web";
            return (true, "");
        }
    }

    private async Task LoadRecomendedPrice()
    {
        var filters = new Filters()
        {
            ProductFormatId = newProfile.ProductFormatId,
            DspId = selectedCampaign.AdvertiserId,
            Currency = newProfile.Currency,
            DateFrom = DateTime.Now.AddDays(-7),
            DateTo = DateTime.Today,
            MaxViewability = 100,
        };

        var body = new RecomendedPrice() { Filters = filters };
        //var resp = await Http.PostAsJsonAsync($"api/profile/calculator?productFormatId={newProfile.ProductFormatId}&campaignId={newProfile.CampaignId}");
        var response = await Http.PostAsJsonAsync($"api/product-format/stats/simple-bidder/cpm", body);
    }

    private async Task LoadProductFeeds()
    {
        productFeeds = await LoadEntityService.LoadProductFeed(selectedCampaign.AdvertiserId);
    }

    private async Task SetupProductFormatToProfile(int productFormatId)
    {
        var selectedProductFormat = productFormats.Where(x => x.Id == productFormatId).FirstOrDefault();
        newProfile.AuctionType = selectedProductFormat.AuctionTypes.FirstOrDefault();
        newProfile.IsTeaserProfile = selectedProductFormat.InventoryTypes.FirstOrDefault() == "Product Listing";
        newProfile.State = "ReadyReady";
        newProfile.ImpressionsRestrictionType = "Profile";
    }

    private async Task LoadProductFeedsItems()
    {
        var productFeedItemsResult = await LoadEntityService.LoadProductFeedItems(productFeeds.FirstOrDefault().Id);
        productFeedItems = productFeedItemsResult.Where(x => x.Brand == selectedAdvertiser.BrandName).ToList();
    }

    private void OnFormDataGenerated(List<FileFormData> formData)
    {
        uploadFileFormData = formData.FirstOrDefault();
        uploadFileFormData.CreativeId = creativeId;
    }

    private async Task SaveProfile()
    {
        // Implement profile saving logic here
        // await LoadEntityService.SaveProfile(newProfile);
    }

    private async Task<string> GetToken()
    {
        return await LocalStorageService.GetItemAsync("access_token");

    }
} 