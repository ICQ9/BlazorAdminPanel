@using System.ComponentModel.DataAnnotations
@using System.IO
@using AdminPanel.Services
@using AdminPanel.Shared.Models
@using AdminPanel.Pages.Components
@using System.Net.Http.Headers
@using System.Text.Json
@using FluentValidation
@inject ISnackbar Snackbar
@inject ILoadEntityService LoadEntityService
@inject IDialogService DialogService
@inject HttpClient Http


<MudDialog>
    <DialogContent>
        @if (_loadingData)
        {
            <div class="blur-overlay">
                <MudProgressCircular Color="Color.Primary" Style="width: 170px; height: 170px" Indeterminate="true" />
            </div>
        }

        <MudStepper @bind-ActiveIndex="_index" OnPreviewInteraction="OnPreviewInteraction">
                <MudStep Title="Fill Basic Profile Information">
                    <ProfileBaseForm @bind-Model="newProfile" OnFormRefReady="@(form => FormRef = form)"/>
                </MudStep>
                <MudStep Title="Link Product to profile">
                    <MudForm Model="@newProfile" @ref="@FormRef">
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="12">
                                <MudTable @ref="_table" Items="productFormats">
                                    <HeaderContent>
                                        <MudTh>Select</MudTh>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Price Model</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudRadioGroup @bind-Value="newProfile.ProductFormatId"><MudRadio Value="@context.Id" Size="Size.Small"></MudRadio></MudRadioGroup>
                                        <MudTd DataLabel="Name">@context.FormatName</MudTd>
                                        <MudTd DataLabel="Position">@context.PriceModel</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudStep>
                <MudStep Title="Create an ad" Disabled="_disabled">
                    @if (newProfile.IsTeaserProfile)
                    {
                        <MudForm Model="@newProfile" @ref="@FormRef">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12">
                                    <MudTable @ref="_tableFeed" Items="productFeedItems" MultiSelection="true" Filter="new Func<ProductFeedItem,bool>(FilterFunc1)" @bind-SelectedItems="selectedFeedItems">
                                        <ToolBarContent>
                                            <MudText Typo="Typo.h6">Select Products</MudText>
                                            <MudSpacer/>
                                            <MudTextField Immediate="true" @bind-Value="searchString1"
                                                          Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                        </ToolBarContent>
                                        <HeaderContent>
                                            <MudTh>Preview</MudTh>
                                            <MudTh>Name</MudTh>
                                            <MudTh>Brand</MudTh>
                                            <MudTh>Description</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Preview"><MudImage Width="50" Height="50" Src="@context.Preview"></MudImage></MudTd>
                                            <MudTd DataLabel="Name">@context.Title</MudTd>
                                            <MudTd DataLabel="Brand">@context.Brand</MudTd>
                                            <MudTd DataLabel="Description">@context.Description</MudTd>
                                        </RowTemplate>
                                        <PagerContent>
                                            <MudTablePager PageSizeOptions="new []{3,5,10}"/>
                                        </PagerContent>
                                    </MudTable>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    }
                    else
                    {
                        <MudForm Model="@newCreative" @ref="@FormRef">
                            <MudTextField Required="true" Label="Name" @bind-Value="@newCreative.Name"/>
                            <MudTextField Required="true" Label="Landing page" @bind-Value="@newCreative.TrackingUrl"/>
                            
                            @if (productFeedItems?.Any() == true)
                            {
                                <MudSelect T="string" Label="Brand Name" @bind-Value="@newCreative.BrandName" Required="true">
                                    @foreach (var brand in productFeedItems.Select(x => x.Brand).Distinct())
                                    {
                                        <MudSelectItem Value="@brand">@brand</MudSelectItem>
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudTextField Required="true" Label="Brand Name" @bind-Value="@newCreative.BrandName"/>
                            }
                            
                            <DragAndDropComponent OnFormDataGenerated="OnFormDataGenerated"/>
                        </MudForm>
                    }

                </MudStep>


                <MudStep Title="Setup Price" Disabled="_disabled">
                    <MudPaper Class="pa-4 my-4" Elevation="0" Outlined="true">
                        <MudGrid>
                            <MudItem xs="6">
                                <div class="d-flex align-center">
                                    <MudText Class="ml-1">Event Price</MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="ml-1"/>
                                </div>
                                <MudTextField T="decimal"
                                              Value="@newProfile.EventPrice"
                                              ValueChanged="@((decimal val) => newProfile.EventPrice = val)"
                                              Margin="Margin.Dense"
                                              Class="mt-1 ml-6"/>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex align-center justify-end">
                                <div>
                                    <MudText Class="mb-1 text-center">Recommended price</MudText>
                                    <MudText Color="Color.Warning" Class="text-center">@newProfile.EventPrice USD</MudText>
                                </div>
                                <MudText Typo="Typo.h5" Class="mx-4">≥</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudStep>
        </MudStepper>
    </DialogContent>
    @*<DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>*@
</MudDialog>
@code {
    private bool _loadingData = true;
    private bool _error;
    private bool _completed;
    private bool basicInformationComplete;
    private bool _disabled;
    private string token;
    private string imagePreview;

    MudForm FormRef;
    MudTable<ProductFormat> _table;
    MudTable<ProductFeedItem> _tableFeed;

    private List<ProductFormat> productFormats = new List<ProductFormat>();
    private IEnumerable<ProductFeed> productFeeds;
    private string searchString1 = "";
    private List<ProductFeedItem> productFeedItems = new List<ProductFeedItem>();

    private FileFormData uploadFileFormData;
    private SaveProfileModel newProfile = new SaveProfileModel();
    private SaveCreativeModel newCreative = new SaveCreativeModel();
    private ProductFormat selectedItem = new ProductFormat();
    private Campaign selectedCampaign = new Campaign();
    private Advertiser selectedAdvertiser = new Advertiser();
    private HashSet<ProductFeedItem> selectedFeedItems = new HashSet<ProductFeedItem>();
    private FeedAdItem feedAdItem = new FeedAdItem();
    private int creativeId;
    private int createdProfileId;

    private int _index;
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string Title { get; set; } = "Create Profile";
    
    
    private bool FilterFunc1(ProductFeedItem feedItem) => FilterFunc(feedItem, searchString1);

    private bool FilterFunc(ProductFeedItem feedItem, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (feedItem.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void Submit()
    {
        
        MudDialog.Close(DialogResult.Ok(true));
    }
    

    private void Cancel() => MudDialog.Cancel();

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (FormRef != null)
        {
            await FormRef.Validate();

            if (!FormRef.IsValid)
            {
                arg.Cancel = true;
                return;
            }
        }
        _loadingData = true;
        StateHasChanged();     // <- оновлює UI *негайно*

        if (arg.Action == StepAction.Complete)
        {
            await ControlStepCompletion(arg);
        }
        _loadingData = false;

        
    }

    protected override async Task OnInitializedAsync()
    {
        _loadingData = false;
    }

    private async Task<int> GetCampaignId()
    {
        try
        {
            var campaings = await LoadEntityService.LoadCampaigns();
            selectedCampaign = campaings.FirstOrDefault();
            return selectedCampaign.Id;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading campaigns: {ex.Message}");
            return 0;
        }
    }

    private async Task LoadProductFormats(int campaignId)
    {
        try
        {
            productFormats = (await LoadEntityService.LoadProductFormat(campaignId)).FirstOrDefault().FormatList ?? new List<ProductFormat>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product formats: {ex.Message}");
        }
    }

    private async Task LoadAdvertiserById(int advId)
    {
        selectedAdvertiser = (await LoadEntityService.LoadAdvertiserById(advId));
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex)
        {
            case 0:
                var campaignId = await GetCampaignId();
                if (campaignId != 0)
                {
                    newProfile.CampaignId = campaignId;
                    await LoadProductFormats(campaignId);
                    await LoadAdvertiserById(selectedCampaign.AdvertiserId);
                }
                else
                {
                    //TODO: Logic if no campains
                }
                break;
            case 1:
                await SetupProductFormatToProfile(newProfile.ProductFormatId);
                await LoadProductFeeds();
                await LoadProductFeedsItems();
                break;
            case 2:
                await SetupCreativeStep(arg);
                await LoadRecomendedPrice();
                break;
            case 3:
                //TODO: Get all entities and go create into DB
                // bool okProfile = await SaveProfile();
                // bool okItem = await SaveAdItem();
                //@inject ISnackbar Snackbar
                // 
                MudDialog.Close(DialogResult.Ok(true));
                Snackbar.Add("Create sucsess",MudBlazor.Severity.Success);
                break;
        }
    }

    private async Task SetupCreativeStep(StepperInteractionEventArgs arg)
    {
        //var createProfileResult = (await LoadEntityService.SaveProfile(newProfile));

        //var json = await createProfileResult.Content.ReadAsStringAsync();
        var (result, eror) = await SetupCreative();
        if (!result)
        {
            await DialogService.ShowMessageBox("Error", eror);
            arg.Cancel = true;
        }

    }

    private async Task<(bool, string)> SetupCreative()
    {
        if (newProfile.IsTeaserProfile)
        {
            if (selectedFeedItems.Count > 0)
            {
                var teaserId = selectedFeedItems.Select(x => x.TeaserFeedId).FirstOrDefault();
                feedAdItem.FeedIds.Add(teaserId);
                feedAdItem.ItemCount = selectedFeedItems.Count();
                feedAdItem.Name = "TeaserFeed";
                feedAdItem.ProfileId = createdProfileId;
                feedAdItem.StaticRules = new StaticRules()
                    {
                        ItemId = selectedFeedItems.Select(x => x.ItemId).ToList(),
                    };
                //var result = await LoadEntityService.SaveTeaserFeedItem(feedAdItem: feedAdItem);
                // if (!result.IsSuccessStatusCode)
                // {
                //     return (false, result.ReasonPhrase);
                // }
            }
            return (true, "");
        }
        else
        {
            //TODO: Check available template
            newCreative.AdvertiserId = selectedAdvertiser.Id;
            newCreative.AdvertiserUrl = $"htps://{selectedAdvertiser.AdvertiserUrl}";
            newCreative.State = "Active";
            newCreative.TemplateId = 1;
            newCreative.LandingPageType = "Web";

            // var result = await LoadEntityService.SaveCreative(newCreative);
            // if (!result.IsSuccessStatusCode)
            // {
            //     return (false, result.ReasonPhrase);
            // }
            return (true, "");
        }
    }

    private async Task LoadRecomendedPrice()
    {
        var filters = new Filters()
            {
                ProductFormatId = newProfile.ProductFormatId,
                DspId = selectedCampaign.AdvertiserId,
                Currency = newProfile.Currency,
                DateFrom = DateTime.Now.AddDays(-7),
                DateTo = DateTime.Today,
                MaxViewability = 100,
            };

        var body = new RecomendedPrice() { Filters = filters };

        var response = await Http.PostAsJsonAsync($"api/product-format/stats/simple-bidder/cpm", body);
    }

    private async Task LoadProductFeeds()
    {
        productFeeds = await LoadEntityService.LoadProductFeed(selectedCampaign.AdvertiserId);
    }

    private async Task SetupProductFormatToProfile(int productFormatId)
    {
        var selectedProductFormat = productFormats.Where(x => x.Id == productFormatId).FirstOrDefault();
        newProfile.AuctionType = selectedProductFormat.AuctionTypes.FirstOrDefault();
        newProfile.IsTeaserProfile = selectedProductFormat.InventoryTypes.FirstOrDefault() == "Product Listing";
        newProfile.State = "ReadyReady";
        newProfile.ImpressionsRestrictionType = "Profile";
    }

    private async Task LoadProductFeedsItems()
    {
        var productFeedItemsResult = await LoadEntityService.LoadProductFeedItems(productFeeds.FirstOrDefault().Id);
        productFeedItems = productFeedItemsResult.Where(x => x.Brand == selectedAdvertiser.BrandName).ToList();
    }

    private void OnFormDataGenerated(List<FileFormData> formData)
    {
        uploadFileFormData = formData.FirstOrDefault();
        uploadFileFormData.CreativeId = creativeId;
    }
}