@page "/campaigns"
@using AdminPanel.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using AdminPanel.Shared.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager Navigation

<div class="campaigns-container">
    <div class="header">
        <h3>Campaigns</h3>
        <button class="btn btn-primary" @onclick="ShowCreateForm">Create Campaign</button>
    </div>

    @if (campaigns == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Budget</th>
                    <th>Date From</th>
                    <th>Date To</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var campaign in campaigns)
                {
                    <tr>
                        <td>@campaign.Id</td>
                        <td>@campaign.Name</td>
                        @* <td>$@campaign.Budget</td>
                        <td>@campaign.DateFrom.ToShortDateString()</td>
                        <td>@campaign.DateTo.ToShortDateString()</td> *@
                        <td>
                            <button class="btn btn-sm btn-info">Edit</button>
                            <button class="btn btn-sm btn-danger">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (showCreateForm)
    {
        <div class="create-form-overlay">
            <CreateCampaign OnCancel="HideCreateForm" OnCampaignCreated="HandleCampaignCreated" />
        </div>
    }
</div>

@code {
    private bool showCreateForm = false;
    private List<Campaign> campaigns;

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaigns();
    }

    private async Task LoadCampaigns()
    {
        // Get token from LocalStorage
        var token = await LocalStorageService.GetItemAsync("access_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            // Set authorization header
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        // Fetch campaigns from API
        try
        {
            campaigns = await Http.GetFromJsonAsync<List<Campaign>>("/api/campaign/list");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading campaigns: {ex.Message}");
            campaigns = new List<Campaign>(); // Initialize empty list on error
        }
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private async Task HandleCampaignCreated()
    {
        // Hide the form
        showCreateForm = false;

        // Reload the campaigns list
        await LoadCampaigns();
    }
}