@page "/campaigns"
@using AdminPanel.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using AdminPanel.Shared.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorageService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.h5">Campaigns</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowCreateForm">Create Campaign</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudTable Items="filteredCampaigns" Hover="true" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Budget</MudTh>
                    <MudTh>Date From</MudTh>
                    <MudTh>Date To</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd DataLabel="Advertiser Id">$@context.AdvertiserId</MudTd>
                    <MudTd DataLabel="Date From">@context.StartDate</MudTd>
                    <MudTd DataLabel="Date To">@context.EndDate</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Text" Color="Color.Info" Size="Size.Small">Edit</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small">Delete</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private bool showCreateForm = false;
    private List<Campaign> campaigns;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaigns();
    }

    private async Task LoadCampaigns()
    {
        // Get token from LocalStorage
        var token = await LocalStorageService.GetItemAsync("access_token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            // Set authorization header
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        // Fetch campaigns from API
        try
        {
            campaigns = await Http.GetFromJsonAsync<List<Campaign>>("/api/campaign/list");
            _loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading campaigns: {ex.Message}");
            campaigns = new List<Campaign>(); // Initialize empty list on error
            _loading = false;
        }
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
    }

    private async Task HandleCampaignCreated()
    {
        // Hide the form
        showCreateForm = false;

        // Reload the campaigns list
        await LoadCampaigns();
    }

    private IEnumerable<Campaign> filteredCampaigns =>
        campaigns ?? Enumerable.Empty<Campaign>();
}